/**
 * pics.cpp
 *
 * EECS 183, Fall 2016
 * Project 4: CoolPics
 *
 * Kelly Brakke, Elizabeth Batista
 * kbrakke, ellazar
 *
 * Implementation of pics functions
 */

#include <iostream>
#include <fstream>
#include <string>
#include <locale>
#include <sstream>

using namespace std;

#include "Line.h"
#include "Triangle.h"
#include "Circle.h"
#include "Rectangle.h"
#include "Graphics.h"

/**
 * Requires: Nothing.
 * Modifies: cout.
 * Effects:  Prints an opening message.
 */
void printOpener();

/**
 * Requires: Nothing.
 * Modifies: cout.
 * Effects:  Prints a closing message.
 */
void printCloser();

/**
 * Requires: Nothing.
 * Modifies: cout.
 * Effects:  Prints a menu.
 */
void printMenu();

/**
 * Requires: ins is in good state.
 * Modifies: cin, ins.
 * Effects:  Closes ins if it is open. Keeps reading filename from the user
 *           (and appends .txt) until the file is successfully opened.
 *           Returns the name of the file that was opened.
 */
string openFile(ifstream& ins);

/**
 * Requires: Nothing.
 * Modifies: Nothing.
 * Effects:  Returns str with all of its alphabetical characters lowercased.
 */
string tolower(string str);

/**
 * Requires: Nothing.
 * Modifies: cin, drawer.
 * Effects:
 *     Opens a file
 *     Start with a blank canvas (drawer)
 *     Start reading from file.  For each line....
 *        Read the 1st character to determine shape
 *        Read the shape:  L reads a line, C reads a circle, T read a triangle
 *            R reads a rectangle.
 *            For any other character, clears drawer and prints
 *            "Error in input file: " << [character already read]
 *            << [all chars remaining on the line] << endl;
 *        Draw shape on canvas
 *     Close file
 *     Print "[Loaded filename]"
 */
void loadFile(Graphics& drawer);

/**
 * Requires: Nothing.
 * Modifies: cout, drawer.
 * Effects:
 *     Read filename from user
 *     concatenate filename with .bmp
 *     Write image to file.
 *     Print "[Wrote filename]"
 */
void writeFile(const Graphics& drawer);

int main()
{
    Graphics drawer;
    string command;
    printOpener();
    printMenu();
    
    // read first command from user
    cin >> command;
    cout << endl;
    command = tolower(command);
    
    // read user's input until he or she quits
    while (command != "quit")
    {
        if (command == "load")
        {
            loadFile(drawer);
        }
        else if (command == "write")
        {
            writeFile(drawer);
        }
        else
        {
            cout << "Invalid command" << endl << endl;
        }
        
        printMenu();
        
        // read next command
        cin >> command;
        cout << endl;
        command = tolower(command);
    }
    
    printCloser();
}

void writeFile(const Graphics& drawer)
{
    // TODO: implement
    // This will make use of Graphics::writeFile()
    /**
     * Requires: Nothing.
     * Modifies: cout, drawer.
     * Effects:
     *     Read filename from user
     *     concatenate filename with .bmp
     *     Write image to file.
     *     Print "[Wrote filename]"
     */
    
    string fileName;
    
    cin >> fileName;
    fileName = fileName + ".bmp";
    drawer.writeFile(fileName);
    cout << "[Wrote " << fileName << "]" << endl << endl;
}

void loadFile(Graphics& drawer)
{
    string line;
    std::ifstream ifs;
    string fileName = openFile(ifs);
    
    bool halt = false;
    
    if (ifs.fail() || ifs.bad())
    {
        cout << "Error reading input file. Halting." << endl;
        halt = true;
    }
    
    // Clear the canvas (drawer object)
    drawer.clear();
    
    while(!halt)
    {
        std::getline(ifs, line);
        if (ifs.eof())
        {
            halt = true;
            break;
        }
        if (ifs.fail() || ifs.bad())
        {
            cout << "Error reading input file. Halting." << endl;
            halt = true;
            ifs.close();
            exit(1);
        }
        
        char shape = line[0];
        istringstream iss(line);
        
        if (shape == 'R')
        {
            //std::cout << "  Found a rectangle." << std::endl;         // TODO - Remove
            Rectangle aRectangle;
            iss >> aRectangle;
            aRectangle.draw(drawer);
            //cout << "Rectangle: " << aRectangle << endl << endl;      // TODO - Remove
        }
        else if (shape == 'C')
        {
            //std::cout << "  Found a circle." << std::endl;            // TODO - Remove
            Circle aCircle;
            iss >> aCircle;
            aCircle.draw(drawer);
            //cout << "Circle: " << aCircle << endl << endl;            // TODO - Remove
        }
        else if (shape == 'T')
        {
            //std::cout << "  Found a triangle." << std::endl;          // TODO - Remove
            Triangle aTriangle;
            iss >> aTriangle;
            aTriangle.draw(drawer);
            //cout << "Triangle: " << aTriangle << endl << endl;        // TODO - Remove
        }
        else if (shape == 'L')
        {
            //std::cout << "  Found a line." << std::endl;              // TODO - Remove
            Line aLine;
            iss >> aLine;
            aLine.draw(drawer);
            //cout << "Line: " << aLine << endl << endl;                // TODO - Remove
        }
        else
        {
            if (shape != '\0')
            {
                // TODO - clear drawer object
                cout << "Error in input file: " << line << endl;
                halt = true;
            }
        }
        //cout << line << endl;        // TODO - Remove
    }
    ifs.close();
    cout << "[Loaded " << fileName << "]" << endl << endl;
    
}

string tolower(string str)
{
    string lStr;
    std::locale loc;
    for (std::string::size_type i=0; i<str.length(); ++i)
        lStr += tolower(str[i],loc);
    return lStr;
}


// Don't change the implementations below!

void printMenu()
{
    cout << "Command:            Description:" << endl
    << "--------            ------------" << endl
    << "load filename       Loads data from a txt file" << endl
    << "write filename      Creates a bmp image from data" << endl
    << "quit                Quits the program" << endl << endl;
}


void printOpener()
{
    cout << "=================================================" << endl
    << "               Welcome to CoolPics" << endl
    << "=================================================" << endl << endl;
}

void printCloser()
{
    cout << "=================================================" << endl
    << "            Thanks for using CoolPics!" << endl
    << "=================================================" << endl;
}

string openFile(ifstream& ins)
{
    string fileName;
    
    // close stream if open
    if (ins.is_open())
    {
        ins.clear();
        ins.close();
    }
    
    // get filename
    cin >> fileName;
    fileName = fileName + ".txt";
    ins.open(fileName);
    
    // keep retrying if failed to open
    while (ins.fail())
    {
        cout << "Error in opening " << fileName
        << ". Enter another file name: ";
        ins.clear();
        cin >> fileName;
        fileName = fileName + ".txt";
        ins.open(fileName);
    }
    
    return fileName;
}
